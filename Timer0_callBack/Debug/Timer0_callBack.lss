
Timer0_callBack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000492  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  0000052c  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000920  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8a:	0c 94 47 02 	jmp	0x48e	; 0x48e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle>:
#include "timer0.h"

uint8 tick=0;
uint8 count=0;

void toggle(){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	tick++;
  9a:	80 91 66 00 	lds	r24, 0x0066
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 66 00 	sts	0x0066, r24
	if(tick==4){
  a4:	80 91 66 00 	lds	r24, 0x0066
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	79 f4       	brne	.+30     	; 0xca <toggle+0x38>
		count++;
  ac:	80 91 67 00 	lds	r24, 0x0067
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 67 00 	sts	0x0067, r24
		tick=0;
  b6:	10 92 66 00 	sts	0x0066, r1
		TOGGLE_BIT(PORTC,0);
  ba:	a5 e3       	ldi	r26, 0x35	; 53
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 27       	eor	r24, r25
  c8:	8c 93       	st	X, r24

	}
}
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <main>:




int main(void){
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	2a 97       	sbiw	r28, 0x0a	; 10
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61

	/*set global interrupt*/
	SREG|=(1<<7);
  e4:	af e5       	ldi	r26, 0x5F	; 95
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ef e5       	ldi	r30, 0x5F	; 95
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8c 93       	st	X, r24
	/*structure for timer0
	 * mode= overflow mode
	 * initial value= 6 to let timer0 count 250 counts
	 * prescaler=1024
	 * */
	TimerConfig Timer0Config={1,0,250,1024};
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	9f 83       	std	Y+7, r25	; 0x07
  f8:	8e 83       	std	Y+6, r24	; 0x06
  fa:	e0 e6       	ldi	r30, 0x60	; 96
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	f9 87       	std	Y+9, r31	; 0x09
 100:	e8 87       	std	Y+8, r30	; 0x08
 102:	f5 e0       	ldi	r31, 0x05	; 5
 104:	fa 87       	std	Y+10, r31	; 0x0a
 106:	e8 85       	ldd	r30, Y+8	; 0x08
 108:	f9 85       	ldd	r31, Y+9	; 0x09
 10a:	00 80       	ld	r0, Z
 10c:	88 85       	ldd	r24, Y+8	; 0x08
 10e:	99 85       	ldd	r25, Y+9	; 0x09
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	99 87       	std	Y+9, r25	; 0x09
 114:	88 87       	std	Y+8, r24	; 0x08
 116:	ee 81       	ldd	r30, Y+6	; 0x06
 118:	ff 81       	ldd	r31, Y+7	; 0x07
 11a:	00 82       	st	Z, r0
 11c:	8e 81       	ldd	r24, Y+6	; 0x06
 11e:	9f 81       	ldd	r25, Y+7	; 0x07
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	9f 83       	std	Y+7, r25	; 0x07
 124:	8e 83       	std	Y+6, r24	; 0x06
 126:	9a 85       	ldd	r25, Y+10	; 0x0a
 128:	91 50       	subi	r25, 0x01	; 1
 12a:	9a 87       	std	Y+10, r25	; 0x0a
 12c:	ea 85       	ldd	r30, Y+10	; 0x0a
 12e:	ee 23       	and	r30, r30
 130:	51 f7       	brne	.-44     	; 0x106 <main+0x36>


	/*pin0 in port c as output*/
	SET_BIT(DDRC,1);
 132:	a4 e3       	ldi	r26, 0x34	; 52
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e4 e3       	ldi	r30, 0x34	; 52
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	8c 93       	st	X, r24

	/*make it off at the beginning*/
	CLEAR_BIT(PORTC,0);
 140:	a5 e3       	ldi	r26, 0x35	; 53
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e5 e3       	ldi	r30, 0x35	; 53
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	8c 93       	st	X, r24

	/*call TIMER0_init to initialize timer0*/
	TIMER0_init(&Timer0Config);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 b6 00 	call	0x16c	; 0x16c <TIMER0_init>
//	ctc();
	/*pass toggle function to execute after timer finished*/
	TIMER0_setCallBack(toggle);
 156:	89 e4       	ldi	r24, 0x49	; 73
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 bc 01 	call	0x378	; 0x378 <TIMER0_setCallBack>


	while(1){
		if(count==5){
 15e:	80 91 67 00 	lds	r24, 0x0067
 162:	85 30       	cpi	r24, 0x05	; 5
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x8e>
			TIMER0_deInit();
 166:	0e 94 ce 01 	call	0x39c	; 0x39c <TIMER0_deInit>
 16a:	f9 cf       	rjmp	.-14     	; 0x15e <main+0x8e>

0000016c <TIMER0_init>:
/* Description:
 * 			  this function responsible about initialization of timer0
 * 			  with mode = over flow
 * 			  prescaler =
 * */
TIMER0_init(const TimerConfig *config_ptr){
 16c:	df 93       	push	r29
 16e:	cf 93       	push	r28
 170:	00 d0       	rcall	.+0      	; 0x172 <TIMER0_init+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <TIMER0_init+0x8>
 174:	00 d0       	rcall	.+0      	; 0x176 <TIMER0_init+0xa>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01

	switch(config_ptr->s_prescaler){
 17e:	e9 81       	ldd	r30, Y+1	; 0x01
 180:	fa 81       	ldd	r31, Y+2	; 0x02
 182:	23 81       	ldd	r18, Z+3	; 0x03
 184:	34 81       	ldd	r19, Z+4	; 0x04
 186:	3e 83       	std	Y+6, r19	; 0x06
 188:	2d 83       	std	Y+5, r18	; 0x05
 18a:	8d 81       	ldd	r24, Y+5	; 0x05
 18c:	9e 81       	ldd	r25, Y+6	; 0x06
 18e:	80 34       	cpi	r24, 0x40	; 64
 190:	91 05       	cpc	r25, r1
 192:	09 f4       	brne	.+2      	; 0x196 <TIMER0_init+0x2a>
 194:	4b c0       	rjmp	.+150    	; 0x22c <TIMER0_init+0xc0>
 196:	2d 81       	ldd	r18, Y+5	; 0x05
 198:	3e 81       	ldd	r19, Y+6	; 0x06
 19a:	21 34       	cpi	r18, 0x41	; 65
 19c:	31 05       	cpc	r19, r1
 19e:	58 f4       	brcc	.+22     	; 0x1b6 <TIMER0_init+0x4a>
 1a0:	8d 81       	ldd	r24, Y+5	; 0x05
 1a2:	9e 81       	ldd	r25, Y+6	; 0x06
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <TIMER0_init+0x68>
 1aa:	2d 81       	ldd	r18, Y+5	; 0x05
 1ac:	3e 81       	ldd	r19, Y+6	; 0x06
 1ae:	28 30       	cpi	r18, 0x08	; 8
 1b0:	31 05       	cpc	r19, r1
 1b2:	31 f1       	breq	.+76     	; 0x200 <TIMER0_init+0x94>
 1b4:	7c c0       	rjmp	.+248    	; 0x2ae <TIMER0_init+0x142>
 1b6:	8d 81       	ldd	r24, Y+5	; 0x05
 1b8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	80 30       	cpi	r24, 0x00	; 0
 1be:	92 07       	cpc	r25, r18
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <TIMER0_init+0x58>
 1c2:	4a c0       	rjmp	.+148    	; 0x258 <TIMER0_init+0xec>
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	9e 81       	ldd	r25, Y+6	; 0x06
 1c8:	24 e0       	ldi	r18, 0x04	; 4
 1ca:	80 30       	cpi	r24, 0x00	; 0
 1cc:	92 07       	cpc	r25, r18
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <TIMER0_init+0x66>
 1d0:	59 c0       	rjmp	.+178    	; 0x284 <TIMER0_init+0x118>
 1d2:	6d c0       	rjmp	.+218    	; 0x2ae <TIMER0_init+0x142>

	case 1:
			/*choose prescaler 1 "No prescaling" */
			SET_BIT(TCCR0,CS00);
 1d4:	a3 e5       	ldi	r26, 0x53	; 83
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e3 e5       	ldi	r30, 0x53	; 83
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
 1e2:	a3 e5       	ldi	r26, 0x53	; 83
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e3 e5       	ldi	r30, 0x53	; 83
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS02);
 1f0:	a3 e5       	ldi	r26, 0x53	; 83
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e3 e5       	ldi	r30, 0x53	; 83
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8b 7f       	andi	r24, 0xFB	; 251
 1fc:	8c 93       	st	X, r24
 1fe:	57 c0       	rjmp	.+174    	; 0x2ae <TIMER0_init+0x142>
			break;
	case 8:
			/*choose prescaler 8 */
			CLEAR_BIT(TCCR0,CS00);
 200:	a3 e5       	ldi	r26, 0x53	; 83
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e3 e5       	ldi	r30, 0x53	; 83
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
 20e:	a3 e5       	ldi	r26, 0x53	; 83
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e3 e5       	ldi	r30, 0x53	; 83
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS02);
 21c:	a3 e5       	ldi	r26, 0x53	; 83
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e3 e5       	ldi	r30, 0x53	; 83
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	8c 93       	st	X, r24
 22a:	41 c0       	rjmp	.+130    	; 0x2ae <TIMER0_init+0x142>
			break;
	case 64:
			/*choose prescaler 64 */
			SET_BIT(TCCR0,CS00);
 22c:	a3 e5       	ldi	r26, 0x53	; 83
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e3 e5       	ldi	r30, 0x53	; 83
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	81 60       	ori	r24, 0x01	; 1
 238:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
 23a:	a3 e5       	ldi	r26, 0x53	; 83
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e3 e5       	ldi	r30, 0x53	; 83
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS02);
 248:	a3 e5       	ldi	r26, 0x53	; 83
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	e3 e5       	ldi	r30, 0x53	; 83
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	8c 93       	st	X, r24
 256:	2b c0       	rjmp	.+86     	; 0x2ae <TIMER0_init+0x142>
			break;
	case 256:
			/*choose prescaler 256 */
			CLEAR_BIT(TCCR0,CS00);
 258:	a3 e5       	ldi	r26, 0x53	; 83
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	e3 e5       	ldi	r30, 0x53	; 83
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	8e 7f       	andi	r24, 0xFE	; 254
 264:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
 266:	a3 e5       	ldi	r26, 0x53	; 83
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e3 e5       	ldi	r30, 0x53	; 83
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8d 7f       	andi	r24, 0xFD	; 253
 272:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
 274:	a3 e5       	ldi	r26, 0x53	; 83
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	e3 e5       	ldi	r30, 0x53	; 83
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	8c 93       	st	X, r24
 282:	15 c0       	rjmp	.+42     	; 0x2ae <TIMER0_init+0x142>
			break;
	case 1024:
			/*choose prescaler 1024 */
			SET_BIT(TCCR0,CS00);
 284:	a3 e5       	ldi	r26, 0x53	; 83
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	e3 e5       	ldi	r30, 0x53	; 83
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
 292:	a3 e5       	ldi	r26, 0x53	; 83
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e3 e5       	ldi	r30, 0x53	; 83
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	8d 7f       	andi	r24, 0xFD	; 253
 29e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
 2a0:	a3 e5       	ldi	r26, 0x53	; 83
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e3 e5       	ldi	r30, 0x53	; 83
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	8c 93       	st	X, r24
			break;
	}

	/*switch case to confige the mode */
	switch(config_ptr->s_mode){
 2ae:	e9 81       	ldd	r30, Y+1	; 0x01
 2b0:	fa 81       	ldd	r31, Y+2	; 0x02
 2b2:	80 81       	ld	r24, Z
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	3c 83       	std	Y+4, r19	; 0x04
 2ba:	2b 83       	std	Y+3, r18	; 0x03
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	31 f0       	breq	.+12     	; 0x2d0 <TIMER0_init+0x164>
 2c4:	2b 81       	ldd	r18, Y+3	; 0x03
 2c6:	3c 81       	ldd	r19, Y+4	; 0x04
 2c8:	21 30       	cpi	r18, 0x01	; 1
 2ca:	31 05       	cpc	r19, r1
 2cc:	21 f1       	breq	.+72     	; 0x316 <TIMER0_init+0x1aa>
 2ce:	4b c0       	rjmp	.+150    	; 0x366 <TIMER0_init+0x1fa>

	case 0:	/*first case for normal mode "overflow mode*/
			/* set to one to choose non PWM mode */
			SET_BIT(TCCR0,FOC0);
 2d0:	a3 e5       	ldi	r26, 0x53	; 83
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	e3 e5       	ldi	r30, 0x53	; 83
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	8c 93       	st	X, r24

			/*choose Normal mode */
			CLEAR_BIT(TCCR0,WGM00);
 2de:	a3 e5       	ldi	r26, 0x53	; 83
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	e3 e5       	ldi	r30, 0x53	; 83
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 7b       	andi	r24, 0xBF	; 191
 2ea:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
 2ec:	a3 e5       	ldi	r26, 0x53	; 83
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e3 e5       	ldi	r30, 0x53	; 83
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	8c 93       	st	X, r24

			/*set the initial value*/
			 TCNT0=config_ptr->s_initialValue;
 2fa:	a2 e5       	ldi	r26, 0x52	; 82
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e9 81       	ldd	r30, Y+1	; 0x01
 300:	fa 81       	ldd	r31, Y+2	; 0x02
 302:	81 81       	ldd	r24, Z+1	; 0x01
 304:	8c 93       	st	X, r24

			 /*enable interrupt to overflow mode */
			 SET_BIT(TIMSK,TOIE0);
 306:	a9 e5       	ldi	r26, 0x59	; 89
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e9 e5       	ldi	r30, 0x59	; 89
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	81 60       	ori	r24, 0x01	; 1
 312:	8c 93       	st	X, r24
 314:	28 c0       	rjmp	.+80     	; 0x366 <TIMER0_init+0x1fa>
			 break;
	case 1:
		/*code of CTC mode*/
		/* set to one to choose non PWM mode */
		SET_BIT(TCCR0,FOC0);
 316:	a3 e5       	ldi	r26, 0x53	; 83
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e3 e5       	ldi	r30, 0x53	; 83
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 68       	ori	r24, 0x80	; 128
 322:	8c 93       	st	X, r24

		/*choose CTC mode */
		CLEAR_BIT(TCCR0,WGM00);
 324:	a3 e5       	ldi	r26, 0x53	; 83
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e3 e5       	ldi	r30, 0x53	; 83
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8f 7b       	andi	r24, 0xBF	; 191
 330:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
 332:	a3 e5       	ldi	r26, 0x53	; 83
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e3 e5       	ldi	r30, 0x53	; 83
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	8c 93       	st	X, r24

		/*set the initial value*/
		TCNT0=config_ptr->s_initialValue;
 340:	a2 e5       	ldi	r26, 0x52	; 82
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e9 81       	ldd	r30, Y+1	; 0x01
 346:	fa 81       	ldd	r31, Y+2	; 0x02
 348:	81 81       	ldd	r24, Z+1	; 0x01
 34a:	8c 93       	st	X, r24

		/* set compare value*/
		OCR0=config_ptr->s_compareValue;
 34c:	ac e5       	ldi	r26, 0x5C	; 92
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e9 81       	ldd	r30, Y+1	; 0x01
 352:	fa 81       	ldd	r31, Y+2	; 0x02
 354:	82 81       	ldd	r24, Z+2	; 0x02
 356:	8c 93       	st	X, r24

		/*enable interrupt to CTC mode */
		SET_BIT(TIMSK,OCIE0);
 358:	a9 e5       	ldi	r26, 0x59	; 89
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	e9 e5       	ldi	r30, 0x59	; 89
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	82 60       	ori	r24, 0x02	; 2
 364:	8c 93       	st	X, r24
		break;
	}



}
 366:	26 96       	adiw	r28, 0x06	; 6
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <TIMER0_setCallBack>:
/* Description:
 * 			  this function responsible to hold the address of the function
 * 			  to be called after timer finished count
 * */
TIMER0_setCallBack(void(*PTR2FUNC)(void)){
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <TIMER0_setCallBack+0x6>
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	9a 83       	std	Y+2, r25	; 0x02
 384:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER0_Call_Back_Ptr =PTR2FUNC;
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	90 93 69 00 	sts	0x0069, r25
 38e:	80 93 68 00 	sts	0x0068, r24
}
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	cf 91       	pop	r28
 398:	df 91       	pop	r29
 39a:	08 95       	ret

0000039c <TIMER0_deInit>:

/* Description:
 * 			  this function responsible to de initialization timer0
 * */

void TIMER0_deInit(){
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
		/*set the initial value to zero*/
		TCNT0=0;
 3a4:	e2 e5       	ldi	r30, 0x52	; 82
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	10 82       	st	Z, r1
		/*cut off clock to the timer */
		CLEAR_BIT(TCCR0,CS00);
 3aa:	a3 e5       	ldi	r26, 0x53	; 83
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	e3 e5       	ldi	r30, 0x53	; 83
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	8e 7f       	andi	r24, 0xFE	; 254
 3b6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS01);
 3b8:	a3 e5       	ldi	r26, 0x53	; 83
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e3 e5       	ldi	r30, 0x53	; 83
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	8d 7f       	andi	r24, 0xFD	; 253
 3c4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS02);
 3c6:	a3 e5       	ldi	r26, 0x53	; 83
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	e3 e5       	ldi	r30, 0x53	; 83
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	8b 7f       	andi	r24, 0xFB	; 251
 3d2:	8c 93       	st	X, r24
}
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	08 95       	ret

000003da <__vector_9>:


/************************************************
 * 				ISR
 ***********************************************/
ISR(TIMER0_OVF_vect){
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
	(*g_TIMER0_Call_Back_Ptr)();
 404:	e0 91 68 00 	lds	r30, 0x0068
 408:	f0 91 69 00 	lds	r31, 0x0069
 40c:	09 95       	icall
}
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_19>:

ISR(TIMER0_COMP_vect){
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
 456:	df 93       	push	r29
 458:	cf 93       	push	r28
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
	(*g_TIMER0_Call_Back_Ptr)();
 45e:	e0 91 68 00 	lds	r30, 0x0068
 462:	f0 91 69 00 	lds	r31, 0x0069
 466:	09 95       	icall
}
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
